process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

const mineflayer = require("mineflayer");
const readline = require("readline");
const FlayerCaptcha = require("flayercaptcha");
const autoClickerPlugin = require("mineflayer-autoclicker");
const { createCanvas, loadImage } = require("canvas");
const { exec } = require('child_process'); // –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
// –£–¥–∞–ª—ë–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∏–º–ø–æ—Ä—Ç: const bot = require('your-bot-library');
const axios = require('axios');
const path = require("path");
const fs = require("fs");
const { Client, GatewayIntentBits } = require('discord.js');
const { ProxyAgent } = require('proxy-agent');
const socks = require('socks').SocksClient;
const { mcUsername, mcPassword, mcServerHost, mcServerPort, proxyHost, proxyPassword, proxyPort, proxyUsername, web1, token, channelId, messages } = require('./config_nu_kak_.json');
const { createBot } = mineflayer;

// –°–æ–∑–¥–∞—ë–º –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç-–±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é mineflayer
const bot = createBot({
  username: mcUsername,
  password: mcPassword,
  host: mcServerHost,
  port: mcServerPort,
  version: '1.16.5', // –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é —Å–µ—Ä–≤–µ—Ä–∞
  agent: new ProxyAgent({ 
    protocol: 'socks5:', 
    host: proxyHost, 
    port: proxyPort, 
    username: proxyUsername, 
    password: proxyPassword 
  }),
  connect: (client) => {
    socks.createConnection({
      proxy: {
        host: proxyHost,
        port: proxyPort,
        type: 5,
        userId: proxyUsername,
        password: proxyPassword
      },
      command: 'connect',
      destination: {
        host: mcServerHost,
        port: mcServerPort
      }
    }, (err, info) => {
      if (err) {
        console.log(err);
        return;
      }
      client.setSocket(info.socket);
      client.emit('connect');
    });
  }
});

bot.once('spawn', () => console.log('spawned'));

let autoclickerActive = false;
let isSneaking = false;
let autoEat = false;
let showChat = true;
let loops = {}; // –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã —Å–æ–æ–±—â–µ–Ω–∏–π

const whitelist = ["Auto1click", "pakistan_3332", "malika_", "rak_3122331", "pakistan_33132", "nu_kak_"];
const hostileMobs = ["zombie", "skeleton", "creeper", "spider", "enderman"];

bot.loadPlugin(autoClickerPlugin);

// –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});

// === –ö–æ–º–∞–Ω–¥—ã –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ ===
rl.on("line", (input) => {
  const args = input.split(" ");
  const command = args[0];

  switch (command) {
    case "on":
      bot.autoclicker.start();
      autoclickerActive = true;
      console.log("üî´ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –í–ö–õ–Æ–ß–ï–ù");
      break;
    case "off":
      bot.autoclicker.stop();
      autoclickerActive = false;
      console.log("‚ùå –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –í–´–ö–õ–Æ–ß–ï–ù");
      break;
    case "inv":
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ –∫–æ–Ω—Å–æ–ª—å
      showInventoryConsole();
      break;
    case "inventory":
      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Discord
      saveInventorySnapshot().catch(err => console.error(err));
      break;
    case "sit":
      toggleSneak();
      break;
    case "eat":
      autoEat = !autoEat;
      console.log(`–ê–≤—Ç–æ-–µ–¥–∞: ${autoEat ? "–í–ö–õ–Æ–ß–ï–ù–ê" : "–í–´–ö–õ–Æ–ß–ï–ù–ê"}`);
      break;
    case "chat":
      showChat = !showChat;
      console.log(`–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞: ${showChat ? "–í–ö–õ–Æ–ß–ï–ù–û" : "–í–´–ö–õ–Æ–ß–ï–ù–û"}`);
      break;
    case "autoleave":
      autoLeave = !autoLeave;
      console.log(`–ê–≤—Ç–æ-–≤—ã—Ö–æ–¥: ${autoLeave ? "–í–ö–õ–Æ–ß–ï–ù" : "–í–´–ö–õ–Æ–ß–ï–ù"}`);
      break;
    case "slot":
      bot.setQuickBarSlot(parseInt(args[1]));
      break;
    case "say":
      bot.chat(args.slice(1).join(" "));
      break;
    case "loop":
      if (args.length < 3) {
        console.log("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: loop [id] [—Ç–µ–∫—Å—Ç] [–º—Å]");
        return;
      }
      {
        const loopId = args[1];
        const message = args.slice(2, -1).join(" ");
        const delay = parseInt(args[args.length - 1]);
        if (loops[loopId]) {
          console.log(`–¶–∏–∫–ª '${loopId}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω.`);
          return;
        }
        startLoop(loopId, message, delay);
      }
      break;
    case "stoploop":
      if (args[1]) {
        stopLoop(args[1]);
      } else {
        stopAllLoops();
      }
      break;
    case "listloop":
      console.log("–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã:", Object.keys(loops));
      break;
    case "players":
      console.log(`–ò–≥—Ä–æ–∫–æ–≤ –≤ –∑–æ–Ω–µ –ø—Ä–æ–≥—Ä—É–∑–∫–∏: ${Object.keys(bot.players).length}`);
      break;
    case "help":
      showCommands();
      break;
    case "drop":
      if (args[1]) {
        const slot = parseInt(args[1]);
        if (!isNaN(slot)) {
          dropItem(slot);
        } else {
          console.log("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞.");
        }
      }
      break;
    case "startM":
      startMessageLoops();
      break;
    case "stopM":
      stopAllMessageLoops();
      break;
    case "listLoops":
      console.log("–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã —Å–æ–æ–±—â–µ–Ω–∏–π:", Object.keys(messageLoops));
      break;
    case "exit":
      process.exit();
      break;
    case "restartBot":
      stopAndRestartBot(); // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
      break;
    default:
      console.log("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ help –¥–ª—è —Å–ø–∏—Å–∫–∞.");
  }
});

// === Discord –±–æ—Ç ===
const discordBot = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ]
});

let mcChatEnabled = false; // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Minecraft –≤ Discord

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ Discord
function showInventoryDiscord(msg) {
  if (!bot.inventory) {
    msg.reply("‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!");
    return;
  }
  const items = bot.inventory.items();
  if (items.length === 0) {
    msg.reply("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!");
    return;
  }
  let invList = "üì¶ **–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:**\n";
  items.forEach((item) => {
    invList += `üîπ ${item.name} (x${item.count})\n`;
  });
  msg.reply(invList);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Discord
discordBot.on('messageCreate', (message) => {
  if (message.author.bot) return;
  const args = message.content.trim().split(/\s+/);
  const command = args[0].toLowerCase();
  switch (command) {
    case "!say":
      bot.chat(args.slice(1).join(" "));
      message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç Minecraft!");
      break;
    case "!on":
      bot.autoclicker.start();
      message.reply("üî´ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –í–ö–õ–Æ–ß–ï–ù");
      break;
    case "!mcchat":
      mcChatEnabled = !mcChatEnabled;
      message.reply(`üì¢ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Minecraft: ${mcChatEnabled ? "–í–ö–õ–Æ–ß–ï–ù–ê" : "–í–´–ö–õ–Æ–ß–ï–ù–ê"}`);
      break;
    case "!off":
      bot.autoclicker.stop();
      message.reply("‚ùå –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –í–´–ö–õ–Æ–ß–ï–ù");
      break;
    case "!inv":
      showInventoryDiscord(message);
      break;
    case "!players":
      message.reply(`üßë‚Äçü§ù‚Äçüßë –ò–≥—Ä–æ–∫–æ–≤ —Ä—è–¥–æ–º: ${Object.keys(bot.players).length}`);
      break;
    case "!exit":
      message.reply("üö™ –û—Ç–∫–ª—é—á–∞—é—Å—å...");
      bot.end();
      discordBot.destroy();
      break;
    case '!loop':
      if (args.length < 4) {
        message.channel.send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !loop [id] [—Ç–µ–∫—Å—Ç] [–º—Å]");
        return;
      }
      const loopId = args[1];
      const messageText = args.slice(2, -1).join(" ");
      const delay = parseInt(args[args.length - 1]);
      if (loops[loopId]) {
        message.channel.send(`–¶–∏–∫–ª '${loopId}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω.`);
        return;
      }
      startLoop(loopId, messageText, delay);
      message.channel.send(`–¶–∏–∫–ª '${loopId}' –∑–∞–ø—É—â–µ–Ω!`);
      break;
    case '!stoploop':
      if (args[1]) {
        stopLoop(args[1]);
        message.channel.send(`–¶–∏–∫–ª '${args[1]}' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
      } else {
        stopAllLoops();
        message.channel.send("–í—Å–µ —Ü–∏–∫–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
      }
      break;
    case '!listloop':
      if (Object.keys(loops).length === 0) {
        message.channel.send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤.");
      } else {
        message.channel.send(`–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã: ${Object.keys(loops).join(', ')}`);
      }
      break;
    case "!startM":
      startMessageLoops();
      message.reply("–¶–∏–∫–ª—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω—ã.");
      break;
    case "!stopM":
      stopAllMessageLoops();
      message.reply("–¶–∏–∫–ª—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
      break;
    case "!listLoops":
      message.reply("–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã —Å–æ–æ–±—â–µ–Ω–∏–π: " + Object.keys(messageLoops).join(', '));
      break;
    case '!eat':
      autoEat = !autoEat;
      message.channel.send(`–ê–≤—Ç–æ-–µ–¥–∞: ${autoEat ? "–í–ö–õ–Æ–ß–ï–ù–ê" : "–í–´–ö–õ–Æ–ß–ï–ù–ê"}`);
      break;
    case '!chat':
      showChat = !showChat;
      message.channel.send(`–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞: ${showChat ? "–í–ö–õ–Æ–ß–ï–ù–û" : "–í–´–ö–õ–Æ–ß–ï–ù–û"}`);
      break;
    case '!slot':
      if (args.length < 2 || isNaN(args[1])) {
        message.channel.send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !slot [–Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞]");
        return;
      }
      const slotNumber = parseInt(args[1]);
      message.channel.send(`–°–ª–æ—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${slotNumber}`);
      break;
    case "sit":
      toggleSneak();
      message.reply("üëÄ –ü—Ä–∏—Å–µ—Å—Ç—å/–ø–æ–ª–∑—Ç–∏: –í–∫–ª—é—á–µ–Ω–æ/–í—ã–∫–ª—é—á–µ–Ω–æ");
      break;
    case "!invss":
      saveInventorySnapshot().catch(err => console.error(err));
      message.reply("üì∏ –°–æ–∑–¥–∞—ë—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...");
      break;
    default:
      message.reply('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –î–æ—Å—Ç—É–ø–Ω—ã–µ: !say, !on, !off, !inv, !invss, !players, !exit, !loop, !stoploop, !listloops, !eat, !chat, !slot, sit, !mcchat');
  }
});

// === –§—É–Ω–∫—Ü–∏–∏ —Ü–∏–∫–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π ===
function startLoop(loopId, messageText, delay) {
  loops[loopId] = setInterval(() => bot.chat(messageText), delay);
  console.log(`–¶–∏–∫–ª '${loopId}' –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${delay} –º—Å.`);
}

function stopLoop(loopId) {
  if (loops[loopId]) {
    clearInterval(loops[loopId]);
    delete loops[loopId];
    console.log(`–¶–∏–∫–ª '${loopId}' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
  }
}

function stopAllLoops() {
  Object.keys(loops).forEach(loopId => {
    clearInterval(loops[loopId]);
    delete loops[loopId];
  });
  console.log("–í—Å–µ —Ü–∏–∫–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
}

function showCommands() {
  console.log(`\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  - on: –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
  - off: –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
  - sit: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–µ
  - eat: –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–µ–¥—É
  - chat: –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —á–∞—Ç
  - autoleave: –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤—ã—Ö–æ–¥
  - slot [0-8]: –°–º–µ–Ω–∏—Ç—å —Å–ª–æ—Ç
  - say [—Ç–µ–∫—Å—Ç]: –ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç
  - loop [id] [—Ç–µ–∫—Å—Ç] [–º—Å]: –ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  - stoploop [id]: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ü–∏–∫–ª
  - stoploop: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ü–∏–∫–ª—ã
  - listloops: –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã
  - players: –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ —Ä—è–¥–æ–º
  - inv / inventory: –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–∫–æ–Ω—Å–æ–ª—å) –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Discord (!invss)
  - drop [–Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞]: –í—ã–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
  - help: –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫
  - exit: –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
  `);
}

// === –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ –∫–æ–Ω—Å–æ–ª–∏ ===
function showInventoryConsole() {
  if (!bot.inventory) {
    console.log("‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!");
    return;
  }
  const items = bot.inventory.items();
  if (items.length === 0) {
    console.log("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!");
    return;
  }
  console.log("\nüì¶ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:");
  items.forEach((item) => {
    console.log(`üî¢ –°–ª–æ—Ç: ${item.slot} | ${item.name} (x${item.count})`);
  });
  console.log("");
}

// === –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è ===
function toggleSneak() {
  isSneaking = !isSneaking;
  bot.setControlState("sneak", isSneaking);
  console.log(`–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ: ${isSneaking ? "–í–ö–õ–Æ–ß–ï–ù–û" : "–í–´–ö–õ–Æ–ß–ï–ù–û"}`);
}

bot.on("respawn", () => {
  console.log("sit");
  toggleSneak();
  setTimeout(() => {
    console.log("sit");
    toggleSneak();
  }, 1500);
});

// === –ê–≤—Ç–æ-–µ–¥–∞ ===
let isEating = false;

async function tryEat() {
  if (isEating) return;
  isEating = true;
  const items = bot.inventory.items();
  const foodNames = [
    "apple",
    "bread",
    "cooked_beef",
    "cooked_porkchop",
    "cooked_rabbit",
    "carrot",
    "potato",
    "golden_apple",
    "mushroom_stew",
    "beetroot_soup",
    "cooked_chicken",
    "cooked_mutton",
    "cooked_cod",
    "cooked_salmon",
    "sweet_berries",
    "enchanted_golden_apple",
    "golden_carrot",
  ];
  const food = items.find((item) => foodNames.includes(item.name));
  if (!food) {
    console.log("üö´ –ï–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
    isEating = false;
    return;
  }
  console.log(`üçñ –ù–∞–π–¥–µ–Ω–∞ –µ–¥–∞: ${food.name}. –ë–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –µ—ë —Å—ä–µ—Å—Ç—å...`);
  const previousSlot = bot.quickBarSlot;
  try {
    await bot.equip(food, "hand");
    await bot.consume();
    console.log("‚úÖ –ü–æ–µ–ª!");
  } catch (err) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–¥–µ:", err);
  }
  setTimeout(() => {
    bot.setQuickBarSlot(previousSlot);
    console.log(`üîÑ –í–µ—Ä–Ω—É–ª–∏ —Å–ª–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ: ${previousSlot}`);
    isEating = false;
  }, 2500);
}

bot.on("health", async () => {
  if (bot.food < 20 && autoEat && !isEating) {
    console.log("üçΩÔ∏è –ú–∞–ª–æ –µ–¥—ã, –±–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–µ—Å—Ç—å...");
    await tryEat();
  }
});

bot.on("health", async () => {
  if (bot.food < 20 && autoEat) {
    console.log("üçΩÔ∏è –ú–∞–ª–æ –µ–¥—ã, –±–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–µ—Å—Ç—å...");
    await tryEat();
  }
});

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç (Minecraft) ===
bot.on("message", (message) => {
  if (showChat) console.log(`[CHAT] ${message.toAnsi()}`);
});

// === –ê–≤—Ç–æ-–≤—ã—Ö–æ–¥ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞ ===
const DISCORD_WEBHOOK_URL = web1;

async function sendDiscordMessage(content) {
  try {
    await axios.post(DISCORD_WEBHOOK_URL, { content });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord:", error);
  }
}

function isWhitelisted(playerName) {
  return whitelist.includes(playerName);
}

let autoLeave = false;
let hasSentHubMessage = false;
let lastDimension = null;
let isInHubOnce = false;
let lastHubEnterTime = null;

const HUB_COORDS = { x: 0.500, y: 100, z: 0.500 };
const HUB_RADIUS = 20;
const HUB_DELAY_TIME = 5000;

function isInHub() {
  const distanceToHub = bot.entity.position.distanceTo(HUB_COORDS);
  return distanceToHub < HUB_RADIUS;
}

bot.on("physicTick", async () => {
  const currentInHub = isInHub();
  if (currentInHub && !isInHubOnce) {
    autoLeave = false;
    isInHubOnce = true;
    lastHubEnterTime = Date.now();
    lastDimension = "hub";
  }
  if (isInHubOnce && Date.now() - lastHubEnterTime > HUB_DELAY_TIME) {
    isInHubOnce = false;
  }
  if (!currentInHub && isInHubOnce) {
    autoLeave = true;
    console.log("üü¢ –ë–æ—Ç –Ω–µ –≤ —Ö–∞–±–µ, –∞–≤—Ç–æ–ª–∏–≤ –≤–∫–ª—é—á–µ–Ω.");
    isInHubOnce = false;
    lastDimension = "other";
  }
  if (!autoLeave || hasSentHubMessage) return;
  const nearbyPlayers = Object.values(bot.players).filter(
    (player) =>
      player.entity &&
      player.entity.position &&
      bot.entity.position.distanceTo(player.entity.position) < 100
  );
  for (const player of nearbyPlayers) {
    if (isWhitelisted(player.username)) continue;
    if (player.entity) {
      const playerName = player.username;
      console.log(`‚ö†Ô∏è –û–ø–∞—Å–Ω–æ—Å—Ç—å! –ò–≥—Ä–æ–∫ ${playerName} —Ä—è–¥–æ–º! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ /hub!`);
      hasSentHubMessage = true;
      autoLeave = false;
      await sendDiscordMessage(`‚ö†Ô∏è **–ë–æ—Ç –ø–µ—Ä–µ—à–µ–ª –≤ /hub!** –ò–≥—Ä–æ–∫ **${playerName}** –±—ã–ª —Ä—è–¥–æ–º.`);
      bot.chat("/hub");
      setTimeout(() => { hasSentHubMessage = false; }, 5000);
    }
  }
});

// === (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—á–∏ ===
// const captcha = new FlayerCaptcha(bot);
// captcha.on("success", async (image) => {
//   await image.toFile("captcha.png");
//   console.log("Captcha —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.");
// });

// === –ö–∞—Ä—Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–ª–æ—Ç–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞) ===
const slotPositions = {
  armor: [
    [8, 8],
    [8, 26],
    [8, 44],
    [8, 62],
  ], // –ë—Ä–æ–Ω—è (—à–ª–µ–º -> –±–æ—Ç–∏–Ω–∫–∏)
  offhand: [[152, 62]], // –õ–µ–≤–∞—è —Ä—É–∫–∞
  main: [...Array(27).keys()].map((i) => [
    8 + (i % 9) * 18,
    84 + Math.floor(i / 9) * 18,
  ]), // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (9—Ö3)
  hotbar: [...Array(9).keys()].map((i) => [8 + i * 18, 142]), // –ë—ã—Å—Ç—Ä–∞—è –ø–∞–Ω–µ–ª—å (—Å–ª–æ—Ç—ã 36-44!)
};

console.warn = () => {}; // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

// === –§—É–Ω–∫—Ü–∏—è –¥—Ä–æ–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ ===
function dropItem(slot) {
  const item = bot.inventory.slots[slot];
  if (!item) {
    console.log(`‚ùå –°–ª–æ—Ç ${slot} –ø—É—Å—Ç.`);
    return;
  }
  bot.tossStack(item, (err) => {
    if (err) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å–ª–æ—Ç–∞ ${slot}:`, err);
    } else {
      console.log(`‚úÖ –í—ã–±—Ä–æ—à–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ${item.name} (—Å–ª–æ—Ç ${slot})`);
    }
  });
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É drop —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å –∏ Discord
rl.on("line", (input) => {
  const args = input.split(" ");
  const command = args[0];
  if (command === "drop" && args[1]) {
    const slot = parseInt(args[1]);
    if (!isNaN(slot)) {
      dropItem(slot);
    } else {
      console.log("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞.");
    }
  }
});

discordBot.on('messageCreate', (message) => {
  if (message.author.bot) return;
  const args = message.content.trim().split(/\s+/);
  const command = args[0].toLowerCase();
  if (command === "!drop" && args[1]) {
    const slot = parseInt(args[1]);
    if (!isNaN(slot)) {
      dropItem(slot);
      message.reply(`‚úÖ –í—ã–±—Ä–æ—à–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ª–æ—Ç–∞ ${slot}`);
    } else {
      message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞.");
    }
  }
});

// –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —á–∞—Ç–∞ Minecraft –≤ Discord (–±–µ–∑ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤)
bot.on("message", (jsonMsg) => {
  if (!mcChatEnabled) return;
  let chatMessage = jsonMsg.toString().replace(/\u00A7./g, "");
  const channel = discordBot.channels.cache.get(channelId);
  if (channel) {
    channel.send(`üì¢ **Minecraft Chat:** ${chatMessage}`);
  }
});

// === –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –≤ Discord ===
async function saveInventorySnapshot() {
  const inventory = bot.inventory.slots;
  const canvas = createCanvas(176, 166); // –†–∞–∑–º–µ—Ä GUI –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  const ctx = canvas.getContext("2d");
  console.log("üì¶ –°–æ–∑–¥–∞—ë–º —Å–Ω–∏–º–æ–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...");
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  try {
    const background = await loadImage(path.join(__dirname, "inventory_background.png"));
    ctx.drawImage(background, 0, 0);
  } catch (err) {
    console.warn("‚ö†Ô∏è –§–æ–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Ñ–æ–Ω.");
    ctx.fillStyle = "#000000";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
  }
  
  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  for (let slot = 0; slot < inventory.length; slot++) {
    const item = inventory[slot];
    if (!item) continue;
    let position;
    if (slot >= 5 && slot <= 8)
      position = slotPositions.armor[slot - 5];
    else if (slot === 45)
      position = slotPositions.offhand[0];
    else if (slot >= 9 && slot <= 35)
      position = slotPositions.main[slot - 9];
    else if (slot >= 36 && slot <= 44)
      position = slotPositions.hotbar[slot - 36];
    else continue;
    
    const iconPath = path.join(__dirname, "icons", `${item.name}.png`);
    if (fs.existsSync(iconPath)) {
      const img = await loadImage(iconPath);
      ctx.drawImage(img, position[0], position[1], 16, 16);
      if (item.count > 1) {
        ctx.font = "12px Arial";
        ctx.fillStyle = "white";
        ctx.textAlign = "right";
        ctx.fillText(item.count, position[0] + 16, position[1] + 16);
      }
    } else {
      console.warn(`‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –¥–ª—è ${item.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const filePath = path.join(__dirname, "inventory.png");
  const buffer = canvas.toBuffer("image/png");
  fs.writeFileSync(filePath, buffer);
  console.log("üì∏ –°–Ω–∏–º–æ–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ inventory.png");
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ Discord
  await sendInventoryScreenshotToDiscord(filePath);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ Discord —á–µ—Ä–µ–∑ Discord-–±–æ—Ç–∞
async function sendInventoryScreenshotToDiscord(filePath) {
  try {
    const channel = discordBot.channels.cache.get(channelId);
    if (!channel) {
      console.error("–ö–∞–Ω–∞–ª Discord –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }
    await channel.send({ files: [filePath] });
    console.log("–°–∫—Ä–∏–Ω—à–æ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Discord!");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ Discord:", error);
  }
}

// –í—Ö–æ–¥ –≤ Discord
discordBot.login(token);




let messageLoops = {}; // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
function startMessageLoops() {
  messages.forEach((msgObj, index) => {
    const loopId = `loop_${index}`;
    if (!messageLoops[loopId]) {
      messageLoops[loopId] = setInterval(() => {
        bot.chat(msgObj.message);
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ "${msgObj.message}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`);
      }, msgObj.interval);
      console.log(`–¶–∏–∫–ª "${loopId}" –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${msgObj.interval} –º—Å.`);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Ü–∏–∫–ª–æ–≤
function stopAllMessageLoops() {
  Object.keys(messageLoops).forEach(loopId => {
    clearInterval(messageLoops[loopId]);
    delete messageLoops[loopId];
    console.log(`–¶–∏–∫–ª "${loopId}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
  });
}

// –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
startMessageLoops(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
